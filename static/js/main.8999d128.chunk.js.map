{"version":3,"sources":["Constants.js","components/todo/AuthenticationService.js","components/todo/HeaderComponent.jsx","components/todo/AuthenticatedRoute.jsx","components/todo/LoginComponent.jsx","api/Todo/TodoDataService.js","components/todo/ListTodos.jsx","components/todo/FooterComponents.jsx","components/todo/LogoutComponent.jsx","api/Todo/HelloWorldService.js","components/todo/Welcome.jsx","components/todo/TodoComponent.jsx","components/todo/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","JPA_API_URL","username","password","axios","get","headers","authorization","this","createBasicAuthToken","window","btoa","token","post","sessionStorage","setItem","setupAxiosInterceptors","createJWTToken","removeItem","getItem","user","interceptors","request","use","config","isUserLoggedIn","HeaderComponent","AuthenticationService","className","href","to","onClick","logout","Component","withRouter","AuthenticatedRoute","props","LoginComponent","state","isInvalid","isSuccess","handleChange","bind","LoginClicked","event","setState","target","name","value","executeJwtAuthService","then","response","registerSuccessfullLoginForJwt","data","history","push","catch","type","onChange","id","delete","todo","put","ListTodos","todos","message","deleteTodoClicked","refreshTodos","updateTodoClicked","addButtonClicked","getUsername","TodoDataService","retrieveAllTodos","deleteTodo","map","key","description","done","toString","moment","targetDate","format","FooterComponent","LogoutComponent","Welcome","welcomeMessage","retrieveWelcomeMsg","handleSuccess","handleError","errorMessage","match","params","HelloWorldService","executeHelloWorldPathService","error","console","log","TodoComponent","Date","onSubmit","validate","AuthenticationServive","retrieveSingleTodo","values","addTodo","updateTodo","errors","length","isValid","initialValues","validateOnBlur","validateOnChange","enableReinitialize","component","ErrorHandler","TodoApp","path","exact","from","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8999d128.chunk.js","sourcesContent":["export const API_URL='http://localhost:8080'\r\nexport const JPA_API_URL='http://localhost:8080/jpa'","import axios from 'axios'\r\nimport {API_URL} from '../../Constants'\r\nexport const USER_NAME_ATTRIBUTE='AuthenticatedUser'\r\nclass AuthenticationService {\r\n    executeBasicAuthService(username,password)\r\n    {\r\n        return axios.get(`${API_URL}/basicauth`,{headers:{authorization:this.createBasicAuthToken(username,password)}})\r\n    }\r\n    createBasicAuthToken(username,password)\r\n    {\r\n        return 'Basic ' +  window.btoa(username + \":\" + password)\r\n    }\r\n\r\n    createJWTToken(token)\r\n    {\r\n        return 'Bearer ' +  token\r\n    }\r\n\r\n    executeJwtAuthService(username,password)\r\n    {\r\n        return axios.post(`${API_URL}/authenticate`,{\r\n            username,\r\n            password\r\n        })\r\n    }\r\n    \r\n    registerSuccessfullLogin(username,password)\r\n    {\r\n        sessionStorage.setItem(USER_NAME_ATTRIBUTE,username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username,password))\r\n    }\r\n\r\n    registerSuccessfullLoginForJwt(username,token)\r\n    {\r\n        sessionStorage.setItem(USER_NAME_ATTRIBUTE,username)\r\n        this.setupAxiosInterceptors(this.createJWTToken(token))\r\n    }\r\n    \r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_ATTRIBUTE)\r\n    }\r\n    \r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE)\r\n        if(user===null) return false\r\n        return true\r\n    }\r\n    \r\n    getUsername() {\r\n        let user = sessionStorage.getItem(USER_NAME_ATTRIBUTE)\r\n        if(user===null) return ''\r\n        return user\r\n    }\r\n    \r\n    setupAxiosInterceptors(token) {\r\n        // let username='user'\r\n        // let password='password'\r\n        // let basicAuthHeader= 'Basic ' +  window.btoa(username + \":\" + password)\r\n\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n}\r\nexport default new AuthenticationService()","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { withRouter } from 'react-router'\r\nimport AuthenticationService from './AuthenticationService.js'\r\nclass HeaderComponent extends Component {\r\n    render() {\r\n        const isUserLoggedIn=AuthenticationService.isUserLoggedIn()\r\n        return (\r\n            <header>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div><a href=\"http://www.in28minutes.com\" className=\"navbar-brand\">in28Minutes</a></div>\r\n                    <ul className=\"navbar-nav\">\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/Welcome/alankrit\">Home</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>}\r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end\">\r\n                        {!isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/Login\">Login</Link></li>}\r\n                        {isUserLoggedIn && <li><Link className=\"nav-link\" to=\"/Logout\" onClick={AuthenticationService.logout}>Logout</Link></li>}\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    } \r\n}\r\n\r\nexport default withRouter(HeaderComponent);\r\n","import React, {Component} from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass AuthenticatedRoute extends Component {    \r\n    render() {\r\n        if(AuthenticationService.isUserLoggedIn()) {\r\n            return <Route {...this.props}/>\r\n        } else {\r\n            return <Redirect to=\"/Login\"/>\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default AuthenticatedRoute","import React, { Component } from 'react'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\nclass LoginComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            username: 'Alankrit',\r\n            password: '',\r\n            isInvalid: false,\r\n            isSuccess: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.LoginClicked = this.LoginClicked.bind(this)\r\n    }\r\n    handleChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value })\r\n\r\n    }\r\n    LoginClicked() {\r\n        // if (this.state.username === \"Alankrit\" && this.state.password === \"sri\") {\r\n        //     AuthenticationService.registerSuccessfullLogin(this.state.username,this.state.password)\r\n        //     this.props.history.push(`/Welcome/${this.state.username}`)\r\n        //     this.setState({ isInvalid: false })\r\n        //     this.setState({ isSuccess: true })\r\n        // }\r\n        // else {\r\n        //     this.props.history.push(\"/Login\")\r\n        //     this.setState({ isInvalid: true })\r\n        //     this.setState({ isSuccess: false })\r\n        // }\r\n        // AuthenticationService.executeBasicAuthService(this.state.username,this.state.password)\r\n        // .then(()=>{\r\n        //     AuthenticationService.registerSuccessfullLogin(this.state.username,this.state.password)\r\n        //     this.props.history.push(`/Welcome/${this.state.username}`)\r\n        // }\r\n        // ).catch(()=>{\r\n        //     this.props.history.push(\"/Login\")\r\n        //     this.setState({ isInvalid: true })\r\n        //     this.setState({ isSuccess: false })\r\n        // })\r\n        AuthenticationService.executeJwtAuthService(this.state.username,this.state.password)\r\n        .then((response)=>{\r\n            AuthenticationService.registerSuccessfullLoginForJwt(this.state.username,response.data.token)\r\n            this.props.history.push(`/Welcome/${this.state.username}`)\r\n        }\r\n        ).catch(()=>{\r\n            this.props.history.push(\"/Login\")\r\n            this.setState({ isInvalid: true })\r\n            this.setState({ isSuccess: false })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>\r\n                <div className=\"container\">\r\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n                 Password : <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n                    {/*Indirect method*/}\r\n                    {/*<IsSuccess isSuccess={this.state.isSuccess}/>*/}\r\n                    {/*<IsInvalid isInvalid={this.state.isInvalid}/>*/}\r\n                    {/*Direct Method */}\r\n                    {/*this.state.isSuccess && <div>Login Success</div>*/}\r\n                    {this.state.isInvalid && <div className=\"alert alert-warning\">Login Failed</div>}\r\n                    <button className=\"btn btn-success\" onClick={this.LoginClicked}>Login</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// function IsSuccess(props){\r\n//     if(props.isSuccess){\r\n//        return <div>Login Success</div>\r\n//     }\r\n//     return null\r\n\r\n// }\r\n// function IsInvalid(props){\r\n//     if(props.isInvalid){\r\n//         return <div>Login Failed</div>\r\n//     }\r\n//     return null\r\n// }\r\n\r\nexport default LoginComponent","import axios from 'axios'\r\nimport {API_URL,JPA_API_URL} from '../../Constants'\r\nclass TodoDataService{\r\n    retrieveAllTodos(name){\r\n        return axios.get(`${JPA_API_URL}/users/${name}/todos`)\r\n    }\r\n    deleteTodo(name,id){\r\n        return axios.delete(`${JPA_API_URL}/users/${name}/todos/${id}`)\r\n    }\r\n    updateTodo(name,id,todo){\r\n        return axios.put(`${JPA_API_URL}/users/${name}/todos/${id}`, todo)\r\n    }\r\n    addTodo(name,todo){\r\n        return axios.post(`${JPA_API_URL}/users/${name}/todos/`, todo)\r\n    }\r\n    retrieveSingleTodo(name,id){\r\n        return axios.get(`${JPA_API_URL}/users/${name}/todos/${id}`)\r\n    }\r\n}\r\nexport default new TodoDataService()","import React, { Component } from 'react'\r\nimport TodoDataService from '../../api/Todo/TodoDataService'\r\nimport AuthenticationService from './AuthenticationService'\r\nimport moment from 'moment'\r\nclass ListTodos extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            todos: [],\r\n            message:null\r\n        }\r\n        this.deleteTodoClicked=this.deleteTodoClicked.bind(this)\r\n        this.refreshTodos=this.refreshTodos.bind(this)\r\n        this.updateTodoClicked=this.updateTodoClicked.bind(this)\r\n        this.addButtonClicked=this.addButtonClicked.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.refreshTodos()\r\n    }\r\n    refreshTodos(){\r\n        let username=AuthenticationService.getUsername()\r\n        TodoDataService.retrieveAllTodos(username)\r\n        .then(\r\n            response =>{\r\n                 this.setState({\r\n                     todos:response.data\r\n                 })\r\n            }\r\n        )\r\n    }\r\n    deleteTodoClicked(id){\r\n        let username=AuthenticationService.getUsername()\r\n        TodoDataService.deleteTodo(username,id)\r\n        .then(\r\n            response =>{\r\n                this.setState({\r\n                message :`Delete of ${id} Successfull`\r\n            })\r\n            this.refreshTodos()\r\n        }\r\n        )\r\n\r\n    }\r\n    updateTodoClicked(id){\r\n        this.props.history.push(`/todos/${id}`)\r\n\r\n    }\r\n    addButtonClicked(){\r\n        this.props.history.push('/todos/-1')\r\n    }\r\n    render() {\r\n        return <div>\r\n            <h1>List Todos</h1>\r\n            {this.state.message && <div className=\"alert alert-success\">{this.state.message}</div>}\r\n            <div className=\"container\">\r\n            <table className=\"table\">\r\n                <thead>\r\n                    <tr>\r\n                        {/*<th>ID</th>*/}\r\n                        <th>Description</th>\r\n                        <th>IsDone</th>\r\n                        <th>TargetDate</th>\r\n                        <th>Update</th>\r\n                        <th>Delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        this.state.todos.map(\r\n                            todo =>\r\n                                <tr key={todo.id}>\r\n                                    {/*<td>{todo.id}</td>*/}\r\n                                    <td>{todo.description}</td>\r\n                                    <td>{todo.done.toString()}</td>\r\n                                    <td>{moment(todo.targetDate).format('DD-MM-YYYY')}</td>\r\n                                    <td><button className=\"btn btn-success\" onClick={()=>this.updateTodoClicked(todo.id)}>Update</button></td>\r\n                                    <td><button className=\"btn btn-warning\" onClick={()=>this.deleteTodoClicked(todo.id)}>Delete</button></td>\r\n                                </tr>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <div className=\"row\">\r\n                <button className=\"btn btn-success\" onClick={()=>this.addButtonClicked()}>Add</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n    }\r\n}\r\n\r\nexport default ListTodos","import React, { Component } from 'react'\r\nclass FooterComponent extends Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                <span className=\"text-muted\">All Rights Reserved 2018 @myFirstProject</span>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\nexport default FooterComponent","import React, { Component } from 'react'\r\nclass LogoutComponent extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <h1>You are Logged Out</h1>\r\n                <div className=\"container\">\r\n                    Thank You for using Our Application.\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default LogoutComponent","import axios from 'axios'\r\nimport {API_URL} from '../../Constants'\r\nclass HelloWorldService{\r\n    executeHelloWorldService(){\r\n        return axios.get(`${API_URL}/hello-world`)\r\n    }\r\n    executeHelloWorldBeanService(){\r\n        return axios.get(`${API_URL}/hello-world-bean`)\r\n    }\r\n    executeHelloWorldPathService(name){\r\n        //let username='user'\r\n        //let password='password'\r\n        //let basicAuthHeader='Basic ' + window.btoa(`${username}:${password}`);\r\n        return axios.get(`${API_URL}/hello-world-pathvariable/${name}`,\r\n        //{\r\n          //  headers:{\r\n            //    authentication : basicAuthHeader\r\n            //}\r\n        //}\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default new HelloWorldService()","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport HelloWorldService from '../../api/Todo/HelloWorldService'\r\nclass Welcome extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            welcomeMessage:''\r\n        }\r\n        this.retrieveWelcomeMsg=this.retrieveWelcomeMsg.bind(this)\r\n        this.handleSuccess=this.handleSuccess.bind(this)\r\n        this.handleError=this.handleError.bind(this)\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome</h1>\r\n                <div className=\"container\">\r\n                    {this.state.errorMessage}\r\n                </div>\r\n                <div className=\"container\">\r\n                    HI {this.props.match.params.name}.\r\n                    You can manage your TO-DOs <Link to=\"/todos\">Here</Link>\r\n                </div>\r\n                <div className=\"container\">\r\n                    Click Here to get Welcome Message \r\n                    <button onClick={this.retrieveWelcomeMsg} className=\"btn btn-success\">Get Welcome Message</button>\r\n                </div>\r\n                <div className=\"container\">\r\n                    {this.state.welcomeMessage}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    retrieveWelcomeMsg(){\r\n       // HelloWorldService.executeHelloWorldService()\r\n        HelloWorldService.executeHelloWorldPathService(this.props.match.params.name)\r\n        .then(response => this.handleSuccess(response))\r\n        .catch(error => this.handleError(error))\r\n    }\r\n    handleSuccess(response){\r\n        this.setState({welcomeMessage:response.data.message})\r\n    }\r\n    handleError(error){\r\n        console.log(error.response)\r\n        let errorMessage = '';\r\n        \r\n        if(error.message) \r\n            errorMessage += error.message\r\n\r\n        if(error.response && error.response.data) {\r\n            errorMessage += error.response.data.message\r\n        }\r\n        this.setState({errorMessage:errorMessage})\r\n    }\r\n}\r\nexport default Welcome","import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\r\nimport TodoDataService from '../../api/Todo/TodoDataService'\r\nimport AuthenticationServive from './AuthenticationService'\r\nclass TodoComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description: '',\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\r\n        }\r\n        this.onSubmit=this.onSubmit.bind(this)\r\n        this.validate=this.validate.bind(this)\r\n    }\r\n    componentDidMount(){\r\n        if(this.state.id===-1) {\r\n            return\r\n        }\r\n        let username=AuthenticationServive.getUsername()\r\n        TodoDataService.retrieveSingleTodo(username,this.state.id)\r\n        .then(response=>this.setState({\r\n            description:response.data.description,\r\n            targetDate:moment(response.data.targetDate).format('YYYY-MM-DD')\r\n        })\r\n        )\r\n    }\r\n    onSubmit(values){\r\n        let username=AuthenticationServive.getUsername()\r\n        if(this.state.id===-1){\r\n        TodoDataService.addTodo(username,{\r\n            id : this.state.id,\r\n            description : values.description,\r\n            targetDate : values.targetDate\r\n        }).then(\r\n            ()=> this.props.history.push('/todos')\r\n            )\r\n\r\n        }else{\r\n        TodoDataService.updateTodo(username,this.state.id,{\r\n            id : this.state.id,\r\n            description : values.description,\r\n            targetDate : values.targetDate\r\n        }).then(\r\n            ()=> this.props.history.push('/todos')\r\n            )\r\n        }\r\n    }\r\n    validate(values) {\r\n        let errors = {}\r\n        if(!values.description) {\r\n            errors.description = 'Enter a Description'\r\n        } else if(values.description.length<5) {\r\n            errors.description = 'Enter atleast 5 Characters in Description'\r\n        }\r\n\r\n        if(!moment(values.targetDate).isValid()) {\r\n            errors.targetDate = 'Enter a valid Target Date'\r\n        }\r\n\r\n        return errors\r\n\r\n    }\r\n    render() {\r\n        let {description,targetDate} = this.state\r\n        //let targetDate = this.state.targetDate\r\n        return (\r\n            <div>\r\n                <h1>Todo</h1>\r\n                <div className=\"container\">\r\n                    <Formik\r\n                        initialValues={{description, targetDate}}\r\n                        validateOnBlur={false}\r\n                        validateOnChange={false}\r\n                        onSubmit={this.onSubmit}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\" \r\n                                                                className=\"alert alert-warning\"/>\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" \r\n                                                                className=\"alert alert-warning\"/>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Target Date</label>\r\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\r\n                                    </fieldset>\r\n                                    <fieldset>\r\n                                        <button className=\"btn btn-success\" type=\"submit\">Save</button>\r\n                                    </fieldset>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>)\r\n    }\r\n}\r\nexport default TodoComponent","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router, Route, Switch} from 'react-router-dom'\r\n//import AuthenticationService from './AuthenticationService.js'\r\nimport HeaderComponent from './HeaderComponent'\r\nimport AuthenticatedRoute from './AuthenticatedRoute'\r\nimport LoginComponent from './LoginComponent'\r\nimport ListTodos from './ListTodos'\r\nimport FooterComponent from './FooterComponents'\r\nimport LogoutComponent from './LogoutComponent'\r\nimport Welcome from './Welcome'\r\nimport TodoComponent from './TodoComponent'\r\nclass TodoApp extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TodoApp\">\r\n                <Router>\r\n                    <>\r\n                        <HeaderComponent />\r\n                        <Switch>\r\n                            <Route path='/' exact from component={LoginComponent} />\r\n                            <Route path='/login' from component={LoginComponent} />\r\n                            <AuthenticatedRoute path='/logout' from component={LogoutComponent} />\r\n                            <AuthenticatedRoute path='/todos/:id' from component={TodoComponent} />\r\n                            <AuthenticatedRoute path='/Welcome/:name' from component={Welcome} />\r\n                            <AuthenticatedRoute path='/todos' from component={ListTodos} />\r\n\r\n                            <Route component={ErrorHandler} />\r\n                        </Switch>\r\n                        <FooterComponent />\r\n                    </>\r\n                </Router>\r\n                {/*<LoginComponent/>\r\n                <Welcome/>*/}\r\n            </div>\r\n        )\r\n    }\r\n}          \r\nfunction ErrorHandler() {\r\n    return <div>An Error Occured!Contact Support.</div>\r\n}\r\n\r\nexport default TodoApp","import React, { Component } from 'react'\n//import FirstComponent from './components/exp/FirstComponent.jsx'\n//import SecondComponent from './components/exp/SecondComponent.jsx'\n//import ThirdComponent from './components/exp/ThirdComponent.jsx'\n//import Counter from './components/counter/Counter'\nimport TodoApp from './components/todo/TodoApp'\nimport './App.css'\nimport './bootstrap.css'\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      {/*<Counter/>*/}\n      <TodoApp/>\n      </div>\n    );\n  }\n}\n// class LearningComponents extends Component{\n//   render() {\n//     return (\n//       <div className=\"App\">\n//        My World\n//        <FirstComponent></FirstComponent>\n//        <SecondComponent></SecondComponent>\n//        <ThirdComponent></ThirdComponent>\n//       </div>\n//     );\n//   }\n// }\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}